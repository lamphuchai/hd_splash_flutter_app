// Mocks generated by Mockito 5.3.0 from annotations
// in unsplash_dart/test/collections_test/collections_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:unsplash_dart/src/api/collections.dart' as _i3;
import 'package:unsplash_dart/src/constants/enum.dart' as _i5;
import 'package:unsplash_dart/src/models/models.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollection_0 extends _i1.SmartFake implements _i2.Collection {
  _FakeCollection_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Collections].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollections extends _i1.Mock implements _i3.Collections {
  MockCollections() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Collection>> getCollections(
          {int? page = 1, int? perPage = 10}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getCollections, [], {#page: page, #perPage: perPage}),
              returnValue:
                  _i4.Future<List<_i2.Collection>>.value(<_i2.Collection>[]))
          as _i4.Future<List<_i2.Collection>>);
  @override
  _i4.Future<_i2.Collection> collectionById(
          {String? id, int? page = 1, int? perPage = 10}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #collectionById, [], {#id: id, #page: page, #perPage: perPage}),
              returnValue: _i4.Future<_i2.Collection>.value(_FakeCollection_0(
                  this,
                  Invocation.method(#collectionById, [], {#id: id, #page: page, #perPage: perPage}))))
          as _i4.Future<_i2.Collection>);
  @override
  _i4.Future<List<_i2.Photo>> photosInCollectionById(
          {String? id,
          int? page = 1,
          int? perPage = 10,
          _i5.Orientation? orientation}) =>
      (super.noSuchMethod(
              Invocation.method(#photosInCollectionById, [], {
                #id: id,
                #page: page,
                #perPage: perPage,
                #orientation: orientation
              }),
              returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]))
          as _i4.Future<List<_i2.Photo>>);
  @override
  _i4.Future<List<_i2.Collection>> relatedCollectionsById({String? id}) =>
      (super.noSuchMethod(
              Invocation.method(#relatedCollectionsById, [], {#id: id}),
              returnValue:
                  _i4.Future<List<_i2.Collection>>.value(<_i2.Collection>[]))
          as _i4.Future<List<_i2.Collection>>);
  @override
  _i4.Future<_i2.Collection> createCollection(
          {String? accessToken,
          String? title,
          String? description,
          bool? private}) =>
      (super.noSuchMethod(
          Invocation.method(#createCollection, [], {
            #accessToken: accessToken,
            #title: title,
            #description: description,
            #private: private
          }),
          returnValue: _i4.Future<_i2.Collection>.value(_FakeCollection_0(
              this,
              Invocation.method(#createCollection, [], {
                #accessToken: accessToken,
                #title: title,
                #description: description,
                #private: private
              })))) as _i4.Future<_i2.Collection>);
  @override
  _i4.Future<_i2.Collection> updateCollection(
          {String? id,
          String? accessToken,
          String? title,
          String? description,
          bool? private}) =>
      (super.noSuchMethod(
          Invocation.method(#updateCollection, [], {
            #id: id,
            #accessToken: accessToken,
            #title: title,
            #description: description,
            #private: private
          }),
          returnValue: _i4.Future<_i2.Collection>.value(_FakeCollection_0(
              this,
              Invocation.method(#updateCollection, [], {
                #id: id,
                #accessToken: accessToken,
                #title: title,
                #description: description,
                #private: private
              })))) as _i4.Future<_i2.Collection>);
  @override
  _i4.Future<bool> deleteCollection({String? id, String? accessToken}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteCollection, [], {#id: id, #accessToken: accessToken}),
          returnValue: _i4.Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<Map<String, dynamic>> addPhotoCollection(
          {String? collectionId, String? photoId, String? accessToken}) =>
      (super.noSuchMethod(
              Invocation.method(#addPhotoCollection, [], {
                #collectionId: collectionId,
                #photoId: photoId,
                #accessToken: accessToken
              }),
              returnValue:
                  _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  _i4.Future<Map<String, dynamic>> removePhotoCollection(
          {String? collectionId, String? photoId, String? accessToken}) =>
      (super.noSuchMethod(
              Invocation.method(#removePhotoCollection, [], {
                #collectionId: collectionId,
                #photoId: photoId,
                #accessToken: accessToken
              }),
              returnValue:
                  _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
}
