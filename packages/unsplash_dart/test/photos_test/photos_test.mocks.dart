// Mocks generated by Mockito 5.3.0 from annotations
// in unsplash_dart/test/photos_test/photos_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:unsplash_dart/src/api/photos.dart' as _i3;
import 'package:unsplash_dart/src/constants/enum.dart' as _i5;
import 'package:unsplash_dart/src/models/models.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoto_0 extends _i1.SmartFake implements _i2.Photo {
  _FakePhoto_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStatistic_1 extends _i1.SmartFake implements _i2.Statistic {
  _FakeStatistic_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Photos].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotos extends _i1.Mock implements _i3.Photos {
  MockPhotos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Photo>> getPhotos(
          {int? page = 1,
          int? perPage = 10,
          _i5.PhotosOrderBy? orderBy = _i5.PhotosOrderBy.latest}) =>
      (super.noSuchMethod(
              Invocation.method(#getPhotos, [],
                  {#page: page, #perPage: perPage, #orderBy: orderBy}),
              returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]))
          as _i4.Future<List<_i2.Photo>>);
  @override
  _i4.Future<_i2.Photo> photoById({String? id}) => (super.noSuchMethod(
          Invocation.method(#photoById, [], {#id: id}),
          returnValue: _i4.Future<_i2.Photo>.value(
              _FakePhoto_0(this, Invocation.method(#photoById, [], {#id: id}))))
      as _i4.Future<_i2.Photo>);
  @override
  _i4.Future<_i2.Photo> randomPhoto(
          {List<String>? collections,
          List<String>? topics,
          String? username,
          String? query,
          _i5.Orientation? orientation,
          _i5.ContentFilter? contentFilter = _i5.ContentFilter.low}) =>
      (super.noSuchMethod(
          Invocation.method(#randomPhoto, [], {
            #collections: collections,
            #topics: topics,
            #username: username,
            #query: query,
            #orientation: orientation,
            #contentFilter: contentFilter
          }),
          returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
              this,
              Invocation.method(#randomPhoto, [], {
                #collections: collections,
                #topics: topics,
                #username: username,
                #query: query,
                #orientation: orientation,
                #contentFilter: contentFilter
              })))) as _i4.Future<_i2.Photo>);
  @override
  _i4.Future<List<_i2.Photo>> randomPhotos(
          {List<String>? collections,
          List<String>? topics,
          String? username,
          String? query,
          _i5.Orientation? orientation,
          _i5.ContentFilter? contentFilter = _i5.ContentFilter.low,
          int? count = 1}) =>
      (super.noSuchMethod(
              Invocation.method(#randomPhotos, [], {
                #collections: collections,
                #topics: topics,
                #username: username,
                #query: query,
                #orientation: orientation,
                #contentFilter: contentFilter,
                #count: count
              }),
              returnValue: _i4.Future<List<_i2.Photo>>.value(<_i2.Photo>[]))
          as _i4.Future<List<_i2.Photo>>);
  @override
  _i4.Future<_i2.Statistic> getStatistics(
          {String? id, String? resolution = r'days', int? quantity = 30}) =>
      (super
          .noSuchMethod(Invocation.method(#getStatistics, [], {#id: id, #resolution: resolution, #quantity: quantity}),
              returnValue: _i4.Future<_i2.Statistic>.value(_FakeStatistic_1(
                  this,
                  Invocation.method(#getStatistics, [], {
                    #id: id,
                    #resolution: resolution,
                    #quantity: quantity
                  })))) as _i4.Future<_i2.Statistic>);
  @override
  _i4.Future<_i2.Photo> updatePhoto(
          {String? id,
          String? accessToken,
          String? description,
          bool? showOnProfile,
          String? tags,
          _i2.Location? location,
          _i2.Exif? exif}) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoto, [], {
            #id: id,
            #accessToken: accessToken,
            #description: description,
            #showOnProfile: showOnProfile,
            #tags: tags,
            #location: location,
            #exif: exif
          }),
          returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
              this,
              Invocation.method(#updatePhoto, [], {
                #id: id,
                #accessToken: accessToken,
                #description: description,
                #showOnProfile: showOnProfile,
                #tags: tags,
                #location: location,
                #exif: exif
              })))) as _i4.Future<_i2.Photo>);
  @override
  _i4.Future<_i2.Photo> likePhoto({String? id, String? accessToken}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #likePhoto, [], {#id: id, #accessToken: accessToken}),
              returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
                  this,
                  Invocation.method(
                      #likePhoto, [], {#id: id, #accessToken: accessToken}))))
          as _i4.Future<_i2.Photo>);
  @override
  _i4.Future<_i2.Photo> unlikePhoto({String? id, String? accessToken}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unlikePhoto, [], {#id: id, #accessToken: accessToken}),
              returnValue: _i4.Future<_i2.Photo>.value(_FakePhoto_0(
                  this,
                  Invocation.method(
                      #unlikePhoto, [], {#id: id, #accessToken: accessToken}))))
          as _i4.Future<_i2.Photo>);
}
